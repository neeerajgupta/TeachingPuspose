     Fundamentals
1-  JAva And its Feature
2)- c++ v/s java
3)- JVM and JRE Jdk
3)- Identifire & its Rule
4)- Reserved words
5)- Data Types with program and its Type
6)- variables and its Type 
7)-	Methods	and its rule





						 OPERATORS & ASSIGNMENTS
	Agenda: 
1. increment & decrement operators
2. arithmetic operators
3. string concatenation operators
4. Relational operators
5. Equality operators
6. instanceof operators
7. Bitwise operators
8. Short circuit operators 
9. type cast operators
10. assignment operator
11. conditional operator
12. new operator
13. [ ] operator
14. Precedence of java operators
15. Evaluation order of java operands 
16. new Vs newInstance( )
17. instanceof Vs isInstance( )
18. ClassNotFoundException Vs NoClassDefFoundError

************************************************************************************************						 
1)---> 		increment & decrement operators				 

Increment OperatoR   
    1)-PRE increments---(x=++z)
	2)-Post increments---(x=z++)
	
Decrements OperatoR   
    1)-PRE increments---(x=++z)
	2)-Post increments---(x=z++)	
	
	ex+-->class Test{
	public static void main(String [] args){	 
   // 1)-PRE increments---(x=++z)
   int x=10;
   System.out.println("preeIncrement OperatoR :") ; 
    System.out.println(++x);  //1+10===>10
 
//	2)-Post increments---(x=z++)");
	int y=20;
	 System.out.println("PostIncrement OperatoR :") ; 
    System.out.println(y++);//20 
 System.out.println(y);	//20 -->+1==21
	}
}
	
	
2)---->	
	
	
************************************************************************************************	
	AirthMetic Operaors
	
	. If we apply any Arithmetic operation b/w 2 variables a & b ,
the result type is always max(int , type of a , type of b)
	
	(+,-,*,/,%)
	
	ex a+b;
	   40+50;
	   45*20;
	   
	   
	   prog==>
	   class Test{
	public static void main(String [] args){
		int a=20;
        float f=30;		
    System.out.println(a+f);//50.0
 
	}
}
	   h/w
	   write a java program to print the value using all primitive datatype with airthmetic operaor? 
	   
************************************************************************************************
string concatenation operators


1)--The only overloaded operator in java is ' + ' operator some times it access 
arithmetic addition operator & some times it access String concatenation 
operator. 
2. If acts as one argument is String type , then '+' operator acts as concatenation 
and If both arguments are number type , then operator acts as arithmetic 
operator


class Test{
	public static void main(String [] args){
		String s ="Shuhani";
		int a=20;
        int b=30;
       int c=30;
	   double d=10.5;
       int e=Integer.parseInt(""+a+b+c);	   
    System.out.println(s+""+a+b+c);//suhani203030
 
	}
}


a=25;
b=4; 
Answer==> 25 and 4 sum is: 29 ///Suhani nhi kar pai YAh program


************************************************************************************************

Relational Operators(< , <= , > , >= )->

Relation operaor basicaly use to the compair the Two are more then oprands(varaible).

{},(),[],-->bracket
+,-,*,/--> jo operator hoth hai usy Jodata hai //suhani

compair kar ke batata hai true false greaterthan less then equalto etc,
2 operands ke bich me 

 
We can apply relational operators for every primitive type except boolean .


class Test{
	public static void main(String [] args){
		
		System.out.println("Relation Operation ");
		int a=10;
	   double d=10.0;
     	   System.out.println(a==d);//true
 
	}
}


class Test{
	public static void main(String [] args){
		
		System.out.println("Relation Operation ");
		int a=10;
	   double d=10.1;
	   int c=20;
	   boolean x=a>d;
	   boolean y=d>c;
	    boolean b=x==y;
     	   System.out.println( b);//true
 
	}
}
************************************************************************************************
5. Equality operators(==,!=)

we can apply equality operators for every primitive type including boolean type 
also

**************************************************************************************************
Instanceof--->

. We can use the instanceof operator to check whether the given an object is 
perticular type or not

// Java Program to Illustrate instanceof Keyword

// Importing required I/O classes
import java.io.*;

// Main class
class GFG {
	public static void main(String[] args)
	{
			int a=2;
			int b=20
			int c=24
		
		System.out.println( a*b/c-a+b);//  2*20/24-2+20
										//40/24-2+20
										//1-2+20
										//1-22
										//-21
	}
}
